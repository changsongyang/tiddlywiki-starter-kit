{
    "title": "$:/plugins/oeyoews/neotw-refresh-site-cache",
    "description": "Neotw Refresh Site Cache",
    "author": "oeyoews",
    "version": "0.0.1",
    "core-version": ">=5.2.5",
    "type": "application/json",
    "plugin-type": "plugin",
    "name": "Neotw Refresh Site Cache",
    "dependents": "$:/plugins/oeyoews/tiddlywiki-tailwindcss-plus",
    "list": "readme explore",
    "text": "{\"tiddlers\":{\"$:/plugins/oeyoews/neotw-refresh-site-cache/readme\":{\"title\":\"$:/plugins/oeyoews/neotw-refresh-site-cache/readme\",\"text\":\"!! Neotw Refresh Site Cache\\n\\n* [[Source|https://github.com/oeyoews/neotw/tree/main/plugins/oeyoews/neotw-refresh-site-cache]]\\n* [[Demo|https://oeyoews.github.io/neotw]]\\n\\n!! Demo\\n\\n<$refresh-site-cache />\\n\"},\"$:/plugins/oeyoews/neotw-refresh-site-cache/widget.js\":{\"title\":\"$:/plugins/oeyoews/neotw-refresh-site-cache/widget.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/neotw-refresh-site-cache/widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nneotw-refresh-site-cache widget\\n\\n\\\\*/\\n// show cache size on button\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict';\\n\\n  if (!$tw.browser) return;\\n\\n  const Widget = require('$:/core/modules/widgets/widget.js').widget;\\n\\n  class DivWidget extends Widget {\\n    constructor(parseTreeNode, options) {\\n      super(parseTreeNode, options);\\n    }\\n\\n    render(parent, nextSibling) {\\n      this.parentDomNode = parent;\\n      this.computeAttributes();\\n      this.execute();\\n\\n      const param = this.getAttribute('param', 'Clear cache');\\n      const classNames = this.getAttribute('class', '').split('');\\n\\n      const buttonNode = $tw.utils.domMaker('button', {\\n        text: param,\\n        class: '',\\n        attributes: {},\\n        children: [],\\n        eventListeners: [\\n          {\\n            name: 'click',\\n            handlerObject: this,\\n            handlerMethod: 'handlerClick',\\n          },\\n        ],\\n      });\\n      classNames.forEach(className => {\\n        if (className) {\\n          buttonNode.classList.add(className);\\n        }\\n      });\\n      parent.insertBefore(buttonNode, nextSibling);\\n      this.domNodes.push(buttonNode);\\n    }\\n\\n    /**\\n     * Refreshes the site cache by clearing the cache for each resource and shows a popup with cache size.\\n     *\\n     * @return {void}\\n     */\\n    async refreshSiteCache() {\\n      const isPWA =\\n        'serviceWorker' in window.navigator &&\\n        navigator.serviceWorker.controller;\\n      if (!isPWA) {\\n        alert('ServiceWorker未激活,请刷新浏览器');\\n        return;\\n      }\\n      let cacheSize = 0;\\n      const cacheNames = await caches.keys();\\n      for (const cacheName of cacheNames) {\\n        const cache = await caches.open(cacheName);\\n        const keys = await cache.keys();\\n        for (const request of keys) {\\n          const response = await cache.match(request);\\n          if (response) {\\n            const headers = response.headers.entries();\\n            for (const header of headers) {\\n              if (header[0].toLowerCase() === 'content-length') {\\n                cacheSize += parseInt(header[1]);\\n              }\\n            }\\n            await cache.delete(request);\\n          }\\n        }\\n      }\\n      const message = 'Cache cleared. Total size: ' + cacheSize + ' bytes.';\\n      alert(message);\\n      cacheSize > 0 && window.location.reload();\\n    }\\n\\n    handlerClick = () => {\\n      this.refreshSiteCache();\\n    };\\n  }\\n\\n  exports['refresh-site-cache'] = DivWidget;\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"
}