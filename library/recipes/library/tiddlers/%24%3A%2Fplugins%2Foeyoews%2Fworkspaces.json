{"title":"$:/plugins/oeyoews/workspaces","description":"workspaces","author":"oeyoews","version":"0.0.1","core-version":">=5.3.1","type":"application/json","plugin-type":"plugin","name":"workspaces","list":"readme","dependents":"","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/workspaces/readme\":{\"title\":\"$:/plugins/oeyoews/workspaces/readme\",\"text\":\"tiddlywiki workspace manager(WIP)\\n\\n!! TODO\\n\\n* add workspaces echarts addon to visual all workspaces\\r\\n* maybe need history list to restory last sesstion\\n\\n{{$:/plugins/oeyoews/workspaces/workspace-manager}}\"},\"$:/plugins/oeyoews/workspaces/workspace-manager\":{\"title\":\"$:/plugins/oeyoews/workspaces/workspace-manager\",\"tags\":\"$:/tags/AboveStory\",\"text\":\"<!-- just for test -->\\r\\n<center>\\r\\n<small>workspace manager </small>\\r\\n</center>\\r\\n<center>\\r\\n<$workspaces workspace=\\\"new\\\"/>\\r\\n<$workspaces workspace=\\\"previous\\\"/>\\r\\n</center>\"},\"$:/plugins/oeyoews/workspaces/workspaces-widget.js\":{\"title\":\"$:/plugins/oeyoews/workspaces/workspaces-widget.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/plugins/oeyoews/workspaces/workspaces-widget.js\\r\\ntype: application/javascript\\r\\nmodule-type: widget\\r\\n\\r\\nworkspace(WIP)\\r\\n\\\\*/\\r\\n\\r\\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\\r\\n\\r\\nclass WorkSpacesWidget extends Widget {\\r\\n  constructor(parseTreeNode, options) {\\r\\n    super(parseTreeNode, options);\\r\\n  }\\r\\n\\r\\n  render(parent, nextSibling) {\\r\\n    this.parentDomNode = parent;\\r\\n    this.computeAttributes();\\r\\n    this.execute();\\r\\n\\r\\n    const createElement = $tw.utils.domMaker;\\r\\n    const wiki = $tw.wiki;\\r\\n\\r\\n    const storyListTiddler = '$:/StoryList';\\r\\n    const workspaceListTiddler = '$:/workspaces';\\r\\n\\r\\n    const { workspace = 'new' } = this.attributes;\\r\\n\\r\\n    const getList = (tiddler) => {\\r\\n      const { list } = wiki.getTiddler(tiddler).fields;\\r\\n      return list;\\r\\n    };\\r\\n\\r\\n    const saveListToWorkspace = () => {\\r\\n      const storyList = getList(storyListTiddler);\\r\\n      wiki.setText(workspaceListTiddler, 'list', null, storyList);\\r\\n      wiki.setText(workspaceListTiddler, 'text', null, '{{!!list}}');\\r\\n    };\\r\\n\\r\\n    const setStoryList = (list) => {\\r\\n      if (workspace !== 'new') {\\r\\n        alert(`即将恢复到 ${localStorage.workspacename} `);\\r\\n      }\\r\\n      wiki.setText(storyListTiddler, 'list', null, list); // create\\r\\n    };\\r\\n\\r\\n    const domNode = createElement('button', {\\r\\n      class: 'p-2',\\r\\n      text: workspace,\\r\\n    });\\r\\n\\r\\n    // TOOD: just use save and new, 循环切换需要考虑的情况太多了\\r\\n\\r\\n    // TODO: 重构数据结构, 支持多列表\\r\\n    domNode.addEventListener('click', () => {\\r\\n      if (workspace === 'previous') {\\r\\n        const previous = getList(workspaceListTiddler);\\r\\n        setStoryList(previous);\\r\\n        saveListToWorkspace();\\r\\n      }\\r\\n      if (workspace === 'new') {\\r\\n        // TODO: 允许用户是否选择保存list\\r\\n        const workspacename = prompt(\\r\\n          'Please input saved workspace name',\\r\\n          'desktop 01',\\r\\n        );\\r\\n        if (!workspacename) {\\r\\n          // alert('你取消了操作');\\r\\n          return;\\r\\n        }\\r\\n        localStorage.workspacename = workspacename;\\r\\n        saveListToWorkspace();\\r\\n        setStoryList();\\r\\n      }\\r\\n      // NOTE: 需要确保刷新widget\\r\\n      // this.refreshSelf();\\r\\n    });\\r\\n\\r\\n    parent.insertBefore(domNode, nextSibling);\\r\\n    this.domNodes.push(domNode);\\r\\n  }\\r\\n}\\r\\n\\r\\nexports.workspaces = WorkSpacesWidget;\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}