{"title":"$:/plugins/oeyoews/hitokoto","description":"hitokoto","author":"oeyoews","version":"0.0.1","core-version":">=5.3.0","type":"application/json","plugin-type":"plugin","name":"hitokoto","meat#disabled":"yes","dependents":"$:/plugins/oeyoews/tiddlywiki-tailwindcss-plus","list":"readme","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/hitokoto/readme\":{\"title\":\"$:/plugins/oeyoews/hitokoto/readme\",\"text\":\"<!-- plugin template readme -->\\n\",\"type\":\"text/markdown\",\"description\":\"hitokoto\"},\"$:/plugins/oeyoews/hitokoto/getRandomColor.js\":{\"title\":\"$:/plugins/oeyoews/hitokoto/getRandomColor.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/plugins/oeyoews/hitokoto/getRandomColor.js\\r\\ntype: application/javascript\\r\\nmodule-type: library\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n/**\\r\\n * Returns a random color from the given array of colors.\\r\\n *\\r\\n * @param {Array} colors - An array of colors.\\r\\n * @return {string} - A randomly selected color.\\r\\n */\\r\\nmodule.exports = () => {\\r\\n  const colors = [\\r\\n    // 'slate',\\r\\n    // 'gray',\\r\\n    // 'zinc',\\r\\n    // 'neutral',\\r\\n    // 'stone',\\r\\n    'red',\\r\\n    'orange',\\r\\n    'amber',\\r\\n    'yellow',\\r\\n    'lime',\\r\\n    'green',\\r\\n    'emerald',\\r\\n    'teal',\\r\\n    'cyan',\\r\\n    'sky blue',\\r\\n    'indigo',\\r\\n    'violet',\\r\\n    'purple',\\r\\n    'fuchsia',\\r\\n    'pink',\\r\\n    'rose',\\r\\n  ];\\r\\n  const randomIndex = Math.floor(Math.random() * colors.length);\\r\\n  return colors[randomIndex];\\r\\n};\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/oeyoews/hitokoto/widget.js\":{\"title\":\"$:/plugins/oeyoews/hitokoto/widget.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/hitokoto/widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nhitokoto widget\\n\\n\\\\*/\\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\\nconst MarkdownIt = require('$:/plugins/tiddlywiki/markdown/markdown-it');\\nconst getRandomColor = require('./getRandomColor');\\n\\nclass HitokotoWidget extends Widget {\\n  constructor(parseTreeNode, options) {\\n    super(parseTreeNode, options);\\n  }\\n\\n  render(parent, nextSibling) {\\n    this.parentDomNode = parent;\\n    this.computeAttributes();\\n    this.execute();\\n\\n    const createElement = $tw.utils.domMaker;\\n    // getall journal tiddler\\n    const journalTiddlers = $tw.wiki.filterTiddlers(\\n      '[tag[Journal]!sort[created]]',\\n    );\\n\\n    const children = [];\\n    function parseAsBoolean(tiddlerName) {\\n      return (\\n        $tw.wiki.getTiddlerText(tiddlerName, 'false').trim().toLowerCase() ===\\n        'true'\\n      );\\n    }\\n\\n    const md = new MarkdownIt({\\n      html: true,\\n      xhtmlOut: true,\\n      breaks: parseAsBoolean('$:/config/markdown/breaks'),\\n      quotes: $tw.wiki.getTiddlerText('$:/config/markdown/quotes').trim(),\\n      typographer: parseAsBoolean('$:/config/markdown/typographer'),\\n      linkify: parseAsBoolean('$:/config/markdown/linkify'),\\n    });\\n\\n    // bug\\n    // .use(require('$:/plugins/tiddlywiki/markdown/markdown-it-tiddlywiki.js'))\\n    const admonition = '$:/plugins/cdr/markdown-more/markdown-it-admonition.js';\\n    const checklist = '$:/plugins/cdr/markdown-more/markdown-it-checklist.js';\\n    if ($tw.wiki.tiddlerExists('$:/plugins/cdr/markdown-more')) {\\n      md.use(require(admonition)).use(require(checklist));\\n    }\\n\\n    journalTiddlers.map((tiddler) => {\\n      const color = getRandomColor();\\n      const { text, created, creator, type, title } =\\n        $tw.wiki.getTiddler(tiddler).fields;\\n      let content;\\n      if (type == 'text/markdown') {\\n        content = md.render(text);\\n      } else {\\n        // https://github.com/Jermolene/TiddlyWiki5/pull/7413\\n        content = $tw.wiki.renderText('text/html', 'text/vnd.tiddlywiki', text);\\n      }\\n      const link = `[[${title}]]`;\\n      // TODO: use eventlisteners\\n      // content += $tw.wiki.renderText('text/html', 'text/vnd.tiddlywiki', link);\\n      const htNode = this.document.createElement('blockquote');\\n      htNode.className = `my-4 bg-${color}-200 p-2 rounded border-l-[3px] border-l-${color}-300 mx-0`;\\n      htNode.innerHTML = content;\\n      children.push(htNode);\\n    });\\n\\n    const domNode = createElement('div', {\\n      children,\\n    });\\n\\n    parent.insertBefore(domNode, nextSibling);\\n    this.domNodes.push(domNode);\\n  }\\n}\\n\\n/**\\n * @description hitokoto widget\\n * @param text\\n */\\nexports.ht = HitokotoWidget;\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}