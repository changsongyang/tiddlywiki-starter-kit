{"title":"$:/plugins/oeyoews/hitokoto","description":"hitokoto","author":"oeyoews","version":"0.0.1","core-version":">=5.3.0","type":"application/json","plugin-type":"plugin","name":"hitokoto","meat#disabled":"yes","dependents":"$:/plugins/oeyoews/tiddlywiki-tailwindcss-plus","list":"readme","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/hitokoto/readme\":{\"title\":\"$:/plugins/oeyoews/hitokoto/readme\",\"text\":\"* ui 参考 https://innei.in/says\",\"type\":\"text/markdown\",\"description\":\"hitokoto\"},\"$:/plugins/oeyoews/hitokoto/getRandomColor.js\":{\"title\":\"$:/plugins/oeyoews/hitokoto/getRandomColor.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/plugins/oeyoews/hitokoto/getRandomColor.js\\r\\ntype: application/javascript\\r\\nmodule-type: library\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n/**\\r\\n * Returns a random color from the given array of colors.\\r\\n *\\r\\n * @param {Array} colors - An array of colors.\\r\\n * @return {string} - A randomly selected color.\\r\\n */\\r\\nmodule.exports = () => {\\r\\n  const colors = [\\r\\n    // 'slate',\\r\\n    // 'gray',\\r\\n    // 'zinc',\\r\\n    // 'neutral',\\r\\n    // 'stone',\\r\\n    'red',\\r\\n    'orange',\\r\\n    'amber',\\r\\n    'yellow',\\r\\n    'lime',\\r\\n    'green',\\r\\n    'emerald',\\r\\n    'teal',\\r\\n    'cyan',\\r\\n    'sky',\\r\\n    'blue',\\r\\n    'indigo',\\r\\n    'violet',\\r\\n    'purple',\\r\\n    'fuchsia',\\r\\n    'pink',\\r\\n    'rose',\\r\\n  ];\\r\\n  const randomIndex = Math.floor(Math.random() * colors.length);\\r\\n  return colors[randomIndex];\\r\\n};\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/oeyoews/hitokoto/widget.js\":{\"title\":\"$:/plugins/oeyoews/hitokoto/widget.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/hitokoto/widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nhitokoto widget\\n\\n\\\\*/\\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\\nconst getRandomColor = require('./getRandomColor');\\n\\nclass HitokotoWidget extends Widget {\\n  constructor(parseTreeNode, options) {\\n    super(parseTreeNode, options);\\n  }\\n\\n  render(parent, nextSibling) {\\n    // server or tw static to return\\n    if (!$tw.browser) return;\\n    this.parentDomNode = parent;\\n    this.computeAttributes();\\n    this.execute();\\n\\n    const createElement = $tw.utils.domMaker;\\n\\n    const { filter = '[tag[Journal]!sort[created]limit[99]]' } =\\n      this.attributes;\\n    // getall journal tiddler\\n    const journalTiddlers = $tw.wiki.filterTiddlers(filter);\\n\\n    const children = [];\\n\\n    // https://github.com/Jermolene/TiddlyWiki5/pull/7413\\n    journalTiddlers.map((tiddler) => {\\n      let content;\\n      const color = getRandomColor();\\n      const { created, creator, title } = $tw.wiki.getTiddler(tiddler).fields;\\n      const footerNode = this.document.createElement('div');\\n      const timeNode = this.document.createElement('div');\\n      const timeFormated = created.toLocaleDateString();\\n      timeNode.textContent = timeFormated;\\n      timeNode.addEventListener('click', () => {\\n        this.dispatchEvent({\\n          type: 'tm-navigate',\\n          param: title,\\n          navigateTo: title,\\n        });\\n      });\\n      timeNode.className =\\n        'mb-2 w-full md:mb-0 md:w-auto hover:underline hover:text-indigo-400 hover:cursor-pointer transition';\\n      const authorNode = this.document.createElement('div');\\n      authorNode.className = 'mb-2 w-full md:mb-0 md:w-auto text-right';\\n      authorNode.textContent = `@${creator}`;\\n      footerNode.className = 'flex flex-wrap text-sm md:justify-between';\\n      footerNode.append(timeNode, authorNode);\\n      content = $tw.wiki.renderTiddler('text/html', title);\\n      const htNode = this.document.createElement('blockquote');\\n      htNode.className = `mt-4 md:mt-8 mb-1 bg-${color}-100/50 px-2 rounded border-l-[3px] border-l-${color}-300 mx-0 py-2`;\\n      htNode.innerHTML = content;\\n      children.push(htNode, footerNode);\\n    });\\n\\n    const domNode = createElement('div', {\\n      children,\\n    });\\n\\n    parent.insertBefore(domNode, nextSibling);\\n    this.domNodes.push(domNode);\\n  }\\n}\\n\\n/**\\n * @description hitokoto widget\\n * @param text\\n */\\nexports.ht = HitokotoWidget;\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}