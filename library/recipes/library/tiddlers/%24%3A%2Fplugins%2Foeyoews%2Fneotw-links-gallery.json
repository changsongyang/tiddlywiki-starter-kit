{"title":"$:/plugins/oeyoews/neotw-links-gallery","description":"neotw-links-gallery","author":"oeyoews","version":"0.0.1","core-version":">=5.3.0","type":"application/json","plugin-type":"plugin","name":"neotw-links-gallery","dependents":"$:/plugins/oeyoews/tiddlywiki-tailwindcss-plus","list":"readme","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/neotw-links-gallery/readme\":{\"title\":\"$:/plugins/oeyoews/neotw-links-gallery/readme\",\"text\":\"## TODO\\n\\n- add quickadd links button on widget\\n\\n* [ ] add description links order for table\\n* [ ] support revese\\n\",\"type\":\"text/markdown\",\"description\":\"neotw-links-gallery\"},\"$:/plugins/oeyoews/neotw-links-gallery/widget.js\":{\"title\":\"$:/plugins/oeyoews/neotw-links-gallery/widget.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/neotw-links-gallery/widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nneotw-links-gallery widget\\n\\n\\\\*/\\n\\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\\n\\nclass ListlinksWidget extends Widget {\\n  constructor(parseTreeNode, options) {\\n    super(parseTreeNode, options);\\n    this.jsonfile = null;\\n  }\\n\\n  render(parent, nextSibling) {\\n    this.parentDomNode = parent;\\n    this.computeAttributes();\\n    this.execute();\\n\\n    const createElement = $tw.utils.domMaker;\\n    const { json = 'list-links.json' } = this.attributes;\\n    this.jsonfile = json;\\n    const { caption } = $tw.wiki.getTiddler(json).fields || {};\\n    const isStoryRiver = this.getVariable('storyTiddler') !== undefined;\\n\\n    const data = $tw.wiki.getTiddlerData(json) || {};\\n    const linksURL = Object.entries(data);\\n\\n    let linkcount = 0;\\n    const createTableData = (text, href, order) => {\\n      const tr = this.document.createElement('tr');\\n      const orderNode = this.document.createElement('td');\\n      const descriptionNode = this.document.createElement('td');\\n      const linkNode = this.document.createElement('td');\\n      if (!href.startsWith('http')) {\\n        console.warn(`${href} is not a valid link`);\\n      }\\n\\n      try {\\n        const { protocol, hostname } = new URL(href);\\n        const url = `${protocol}//${hostname}`;\\n        const createLinkNode = (text, href) =>\\n          createElement('a', {\\n            text: hostname,\\n            attributes: {\\n              href,\\n              title: url,\\n              target: '_blank',\\n            },\\n          });\\n\\n        descriptionNode.className =\\n          'p-2 bg-gray-200 dark:bg-black font-bold capitalize';\\n        linkNode.className = 'p-2 bg-gray-200 dark:bg-black font-bold';\\n        descriptionNode.textContent = text;\\n        orderNode.textContent = order;\\n        orderNode.className =\\n          'font-bold bg-gray-100 dark:bg-black group-hover:bg-gray-300 group-hover:dark:bg-gray-800 transiton';\\n        const children = [descriptionNode, linkNode];\\n        isStoryRiver && children.unshift(orderNode);\\n        tr.append(...children);\\n\\n        tr.className = 'group';\\n        linkNode.append(createLinkNode(text, href));\\n      } catch (e) {\\n        console.warn(e);\\n      }\\n      return tr;\\n    };\\n\\n    const createThNode = (caption) => {\\n      const tr = this.document.createElement('tr');\\n      const orderNode = this.document.createElement('th');\\n      const descriptionNode = this.document.createElement('th');\\n      const linkNode = this.document.createElement('th');\\n\\n      const children = [orderNode, descriptionNode, linkNode];\\n      tr.append(...children);\\n\\n      orderNode.textContent = 'Order';\\n      descriptionNode.textContent = 'Description';\\n      linkNode.textContent = 'Link';\\n      tr.className = 'font-bold capitalize';\\n      return tr;\\n    };\\n\\n    const children = [];\\n\\n    linksURL.forEach(([text, href]) => {\\n      linkcount++;\\n      children.push(createTableData(text, href, linkcount));\\n    });\\n\\n    isStoryRiver && children.unshift(createThNode(caption));\\n\\n    const domNode = createElement('table', {\\n      children,\\n    });\\n\\n    parent.insertBefore(domNode, nextSibling);\\n    this.domNodes.push(domNode);\\n  }\\n  refresh(changedTiddlers) {\\n    if (Object.keys(changedTiddlers).includes(this.jsonfile)) {\\n      this.refreshSelf();\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\\n/**\\n * @description\\n * @param {json}\\n */\\nexports['list-links'] = ListlinksWidget;\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}